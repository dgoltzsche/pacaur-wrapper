#!/usr/bin/env python2.7
from subprocess import Popen, PIPE
import sys, re, os
import textwrap
class cl:
    D = '\033[0m' #default color
    R = '\033[91m' #light red
    G = '\033[92m' #light green
    Y = '\033[93m' #light yellow
    B = '\033[94m' #light blue

#is called on user abort
def user_abort():
    print "\nuser interrupt"
    exit(0);

#parses the input string for numbers
#possible formats: 1  1,3,7  2-7
def parse(string):
    if '-' in string:
        #try range
        a,b = re.match('^[0-9]+-[0-9]+$',string).group().split('-')
        ret = []
        integerlist = range(int(a),int(b)+1)
    else:
        #try comma seperated list (special case: one integer)
        stringlist = re.match('^([0-9]+(,[0-9]+)*)?$',string).group().split(',')
        integerlist = map(int,stringlist)

    return integerlist


#colorizes the substring in string with color color
#the search is case-insensitive
def colorize(string,sub,color):
    index = string.lower().find(sub.lower())
    if index>0:
        #insert defined color string
        string = string[:index] + color + string[index:]
        #insert default color string
        length=len(sub)+len(color)
        string = string[:index+length] + cl.D + string[index+length:]
    return string

def get_orphans():
    args = ['pacaur','-Qtdq']
    output = Popen(args,bufsize=1, stdout=PIPE).communicate()[0]
    return output.split('\n')

def main():
    try:
        rows, columns = os.popen('stty size', 'r').read().split()
        args = sys.argv
        args[0]='pacaur'
        pkgnames=[]
        if len(args)>2 and args[1]=="-Ss":
            #wrap around pacaur

            p = Popen(args,stdin=PIPE, stdout=PIPE, bufsize=1)
            lnctr = 0
            num = 0
            for line in p.stdout:
                line = line.lstrip()
                origline=line #backup line
                #colorize out-of-date flag
                line = colorize(line,'<!>',cl.D)
                #colorize '[installed]' flag
                line = colorize(line,'[installed]',cl.G)
                line = colorize(line,'[Installiert]',cl.G)
                if lnctr % 2 == 0: #this is the package line
                    #fetch package name
                    packageName=origline.split(' ')[0]
                    slashPos=packageName.rfind("/")
                    packageBaseName=packageName[slashPos+1:]
                    line = colorize(line,packageBaseName,cl.R)
                    pkgnames.append(packageName)
                    print cl.B+"["+str(num)+"]"+cl.D,
                    #colorize search term, case insensitive
                    line = colorize(line,args[2],cl.Y)
                    print line,
                    num=num+1
                else: # this is the description
                    #colorize search term, case insensitive
                    line = colorize(line,args[2],cl.Y)
                    indent = len(str(num))+3
                    for ln in textwrap.wrap(line, int(columns)-indent):
                        #print each wrapped line, with dynamic whitespaces
                        print ' '*indent + ln
                lnctr=lnctr+1

            if lnctr == 0:
                #no packages found
                exit(1)

            ilist = None
            while ilist is None:
                try:
                    ilist=parse(raw_input(":: Packagenumber(s): "));
                    #range check
                    ilist = list(set(ilist))
		    #print ilist
		    errlist = [] 
		    for i in ilist:
		        if (i < 0) or (i > num-1):
			    errlist.append(i)
		    if len(errlist):
                        print ":: Invalid Packagenumber(s): ",
                        print errlist
		        errlist = None
		        ilist = None
                except KeyboardInterrupt:
                    user_abort()
                except:
                    pass
            
            inargs=raw_input(":: Pacaur arguments [-S]: ")
            if len(inargs)==0:
                inargs='-S'

            argpkgnames=''
            for i in ilist:
                #workaround: remove repository identifiers, since
                #pacaur does not always understand them
                argpkgnames = pkgnames[i].split("/")[1]+' '

                #argpkgnames += pkgnames[i]+' '

            newargs=['pacaur',inargs, argpkgnames.strip()]
            p = Popen(newargs,bufsize=1)
            p.wait()
        elif len(args)>1 and (args[1] == '--autoremove' or args[1] == '-a'):
            while(1):
                orphans = get_orphans()
                if(len(orphans) - 1 == 0):
                    print '0 orphans found'
                    exit(0)
                else:
                    print str(len(orphans)-1) + ' orphan(s) found:'
                    print '\t' + '\n\t'.join(orphans)
                args = ['pacaur','-R']
                args.extend(orphans)
                p = Popen(args,bufsize=1)
                p.wait()
        elif len(args)>1 and (args[1] == '--help' or args[1] == '-h'):
            print '########pacaur-wrapper help########'
            print 'usage: use the same arguments as in pacaur'
            print 'overlayed operations:'
            print '   -Ss              sync and search in  repositories'
            print '                    inputs after search:'
            print '                        -packagenumber0'
            print '                            non-negative numbers: 1'
            print '                            comma-seperated numbers: 1,3,7'
            print '                            ranges: 2-7'
            print '                        -pacaur arguments, default -S'
            print '                            see pacaur-help below'
            print 'additional operations:'
            print '   -a --autoremove  recursively remove orphans'
            print '############pacaur help############'
            p = Popen(args,bufsize=1)
            p.wait()
        else:
            #simply pass arguments to pacaur:
            p = Popen(args,bufsize=1)
            p.wait()
    except KeyboardInterrupt:
        user_abort()
if __name__ == "__main__":
        main()
